var documenterSearchIndex = {"docs":
[{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023 Benedict Geihe and Michael Schlottke-LakemperPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference-libtrixi-jl/#LibTrixi.jl-API","page":"LibTrixi.jl","title":"LibTrixi.jl API","text":"","category":"section"},{"location":"reference-libtrixi-jl/","page":"LibTrixi.jl","title":"LibTrixi.jl","text":"CurrentModule = LibTrixi","category":"page"},{"location":"reference-libtrixi-jl/","page":"LibTrixi.jl","title":"LibTrixi.jl","text":"Modules = [LibTrixi]","category":"page"},{"location":"reference-libtrixi-jl/#LibTrixi.SimulationState","page":"LibTrixi.jl","title":"LibTrixi.SimulationState","text":"SimulationState\n\nData structure to store a simulation state that consists of a semidiscretization plus the time integrator.\n\n\n\n\n\n","category":"type"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_calculate_dt","page":"LibTrixi.jl","title":"LibTrixi.trixi_calculate_dt","text":"trixi_calculate_dt(simstate_handle::Cint)::Cdouble\n\nCompute, store, and return the time step size for the next time integration step.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_finalize_simulation","page":"LibTrixi.jl","title":"LibTrixi.trixi_finalize_simulation","text":"trixi_finalize(simstate_handle::Cint)::Cvoid\n\nFinalize a simulation and attempt to free the underlying memory.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_initialize_simulation","page":"LibTrixi.jl","title":"LibTrixi.trixi_initialize_simulation","text":"trixi_initialize_simulation(libelixir::Cstring)::Cint\ntrixi_initialize_simulation(libelixir::AbstractString)::Cint\n\nInitialize a new simulation based on the file libelixirand return a handle to the corresponding SimulationState as a Cint (i.e, a plain C int).\n\nThe libelixir has a similar purpose as a regular \"elixir\" in Trixi.jl, as it completely defines a simulation setup in Julia code. A key difference (and thus the name libelixir) is that instead of running a simulation directly, it should define an argument-less function named init_simstate() that returns a SimulationState with the complete simulation setup. trixi_initialize_simulation will store the SimulationState object internally and allow one to use it in subsequent calls to libtrixi via the handle returned from this function.\n\nFor convenience, when using LibTrixi.jl directly from Julia, one can also pass a regular String in the libelixir argument.\n\nnote: Libelixir hygiene and `init_simstate`\nThe libelixir file will be evaluated in the Main module. Thus any previously defined function init_simstate will be overwritten, and any variables defined outside the function will live throughout the lifetime of the Julia process.\n\nwarning: Thread safety\nThis function is not thread safe. Since the libelixir file will be evaluated in the Main module, calling trixi_initialize_simulation simultaneously from different threads can lead to undefined behavior.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_is_finished","page":"LibTrixi.jl","title":"LibTrixi.trixi_is_finished","text":"trixi_is_finished(simstate_handle::Cint)::Cint\n\nReturn 0 if the simulation time has not yet reached the final time, and 1 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_step","page":"LibTrixi.jl","title":"LibTrixi.trixi_step","text":"trixi_step(simstate_handle::Cint)::Cvoid\n\nAdvance the simulation in time by one step.\n\n\n\n\n\n","category":"function"},{"location":"#libtrixi","page":"Home","title":"libtrixi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-dev) (Image: Coveralls) (Image: Codecov) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Libtrixi is an interface library for using Trixi.jl from C/C++/Fortran.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This project is in a very early stage and subject to changes without warning at any time.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A local installation of MPI and Julia is required.","category":"page"},{"location":"#Get-the-sources","page":"Home","title":"Get the sources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"git clone git@github.com:trixi-framework/libtrixi.git","category":"page"},{"location":"#Building","page":"Home","title":"Building","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For building, cmake and its typical workflow is used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is recommended to created an out-of-source build directory, e.g.\nbash  mkdir build  cd build\nCall cmake\nbash  cmake -DCMAKE_INSTALL_PREFIX=<install_directory> ..\ncmake should find MPI and Julia automatically. If not, the directories  can be specified manually.  The cmake clients ccmake or cmake-gui could be useful.\nSpecifying the directory install_directory for later installation is optional.\nCall make\nbash  make\nThis will build and place libtrixi.so in the current directory along with its  header and a Fortran mod file. Your application will have to include and link  against these.\nExamples can be found in the examples subdirectory.\nInstall (optional)\nbash  make install\nThis will install all provided file to the specified location.","category":"page"},{"location":"#Setting-up-Julia","page":"Home","title":"Setting up Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After the library has been installed, you need to configure Julia for use with libtrixi. For this, create a directory where all necessary files will be placed, e.g., libtrixi-julia. Then, you can use the utils/libtrixi-init-julia tool to do the rest for you:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Assuming you are in still in the `build/` directory inside the repo clone\ncd ..\nmkdir libtrixi-julia\ncd libtrixi-julia\n../utils/libtrixi-init-julia ..","category":"page"},{"location":"","page":"Home","title":"Home","text":"When running a program that uses libtrixi, make sure the set up the JULIA_DEPOT_PATH environment variable to point to the JULIA_DEPOT_LIBTRIXI subfolder in the libtrixi-julia directory. In your code, pass the path to the libtrixi-julia directory as the project_directory argument to trixi_initialize.","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Go to the repository root directory and run a simple demonstrator,","category":"page"},{"location":"","page":"Home","title":"Home","text":"cd ..\nJULIA_DEPOT_PATH=$PWD/libtrixi-julia/JULIA_DEPOT_LIBTRIXI \\\n    build/examples/simple_trixi_controller_c \\\n    $PWD/libtrixi-julia \\\n    LibTrixi.jl/examples/libelixir_demo.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"which should give you an output similar to this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  Activating project at `~/hackathon/libtrixi/libtrixi-julia`\nStatus `/mnt/ssd/home/mschlott/hackathon/libtrixi/libtrixi-julia/Project.toml`\n  [7e097bd5] LibTrixi v0.1.0 `../LibTrixi.jl`\n  [3da0fdf6] MPIPreferences v0.1.8\nModule LibTrixi.jl loaded\nSimulation state initialized\nCurrent time step length: 0.300000\nCurrent time: 0.3\nCurrent time: 0.6\nCurrent time: 0.8999999999999999\nCurrent time: 1.0\nFinal time reached\nSimulation state finalized\nlibtrixi: finalize","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you change the executable name from simple_trixi_controller_c to simple_trixi_controller_f, you will get a near identical output. The corresponding source files simple_trixi_controller.c and simple_trixi_controller.f90 give you an idea on how to use the C and Fortran APIs of libtrixi, and can be found in the examples/ folder.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Libtrixi was initiated by Benedict Geihe (University of Cologne, Germany) and Michael Schlottke-Lakemper (RWTH Aachen University/High-Performance Computing Center Stuttgart (HLRS), Germany), who are also its principal maintainers.","category":"page"},{"location":"#readme-license","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Libtrixi is licensed under the MIT license (see License).","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) through the research unit FOR 5409 \"Structure-Preserving Numerical Methods for Bulk- and Interface Coupling of Heterogeneous Models (SNuBIC)\" (project number 463312734).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding from the German Federal Ministry of Education and Research through the project grant \"Adaptive earth system modeling with significantly reduced computation time for exascale supercomputers (ADAPTEX)\" (funding id: 16ME0668K).","category":"page"}]
}
