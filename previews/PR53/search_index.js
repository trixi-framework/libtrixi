var documenterSearchIndex = {"docs":
[{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023 Benedict Geihe and Michael Schlottke-LakemperPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#dlopen-failed-is-triggered-by-OpenMPI","page":"Troubleshooting","title":"dlopen failed is triggered by OpenMPI","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"A warning similar to","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"--------------------------------------------------------------------------\nSorry!  You were supposed to get help about:\n    dlopen failed\nBut I couldn't open the help file:\n    <someJuliaPath>/share/openmpi/help-mpi-common-cuda.txt: No such file or directory.  Sorry!\n--------------------------------------------------------------------------","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"hints at missing CUDA libraries, which are optional for Trixi.jl. You can use the environment variable OMPI_MCA_mpi_cuda_support=0 to prevent attempting to load the library.","category":"page"},{"location":"reference-libtrixi-jl/#LibTrixi.jl-API","page":"LibTrixi.jl","title":"LibTrixi.jl API","text":"","category":"section"},{"location":"reference-libtrixi-jl/","page":"LibTrixi.jl","title":"LibTrixi.jl","text":"CurrentModule = LibTrixi","category":"page"},{"location":"reference-libtrixi-jl/","page":"LibTrixi.jl","title":"LibTrixi.jl","text":"Modules = [LibTrixi]","category":"page"},{"location":"reference-libtrixi-jl/#LibTrixi.SimulationState","page":"LibTrixi.jl","title":"LibTrixi.SimulationState","text":"SimulationState\n\nData structure to store a simulation state that consists of a semidiscretization plus the time integrator.\n\n\n\n\n\n","category":"type"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_calculate_dt","page":"LibTrixi.jl","title":"LibTrixi.trixi_calculate_dt","text":"trixi_calculate_dt(simstate_handle::Cint)::Cdouble\n\nCompute, store, and return the time step size for the next time integration step.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_finalize_simulation","page":"LibTrixi.jl","title":"LibTrixi.trixi_finalize_simulation","text":"trixi_finalize(simstate_handle::Cint)::Cvoid\n\nFinalize a simulation and attempt to free the underlying memory.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_initialize_simulation","page":"LibTrixi.jl","title":"LibTrixi.trixi_initialize_simulation","text":"trixi_initialize_simulation(libelixir::Cstring)::Cint\ntrixi_initialize_simulation(libelixir::AbstractString)::Cint\n\nInitialize a new simulation based on the file libelixirand return a handle to the corresponding SimulationState as a Cint (i.e, a plain C int).\n\nThe libelixir has a similar purpose as a regular \"elixir\" in Trixi.jl, as it completely defines a simulation setup in Julia code. A key difference (and thus the name libelixir) is that instead of running a simulation directly, it should define an argument-less function named init_simstate() that returns a SimulationState with the complete simulation setup. trixi_initialize_simulation will store the SimulationState object internally and allow one to use it in subsequent calls to libtrixi via the handle returned from this function.\n\nFor convenience, when using LibTrixi.jl directly from Julia, one can also pass a regular String in the libelixir argument.\n\nnote: Libelixir hygiene and `init_simstate`\nThe libelixir file will be evaluated in the Main module. Thus any previously defined function init_simstate will be overwritten, and any variables defined outside the function will live throughout the lifetime of the Julia process.\n\nwarning: Thread safety\nThis function is not thread safe. Since the libelixir file will be evaluated in the Main module, calling trixi_initialize_simulation simultaneously from different threads can lead to undefined behavior.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_is_finished","page":"LibTrixi.jl","title":"LibTrixi.trixi_is_finished","text":"trixi_is_finished(simstate_handle::Cint)::Cint\n\nReturn 0 if the simulation time has not yet reached the final time, and 1 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference-libtrixi-jl/#LibTrixi.trixi_step","page":"LibTrixi.jl","title":"LibTrixi.trixi_step","text":"trixi_step(simstate_handle::Cint)::Cvoid\n\nAdvance the simulation in time by one step.\n\n\n\n\n\n","category":"function"},{"location":"#libtrixi","page":"Home","title":"libtrixi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-dev) (Image: Coveralls) (Image: Codecov) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Libtrixi is an interface library for using Trixi.jl from C/C++/Fortran.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This project is in an early stage and the API is still under development.  Nevertheless, basic functionality is already implemented and actively tested.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, libtrixi is only developed and tested for Linux. Furthermore, a local installation of MPI, p4est (see steps 5-7 in its README), and Julia is required.","category":"page"},{"location":"#Get-the-sources","page":"Home","title":"Get the sources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"git clone git@github.com:trixi-framework/libtrixi.git","category":"page"},{"location":"#building-libtrixi","page":"Home","title":"Building","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For building, cmake and its typical workflow is used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is recommended to create an out-of-source build directory, e.g.\nbash  mkdir build  cd build\nCall cmake\nbash  cmake -DCMAKE_BUILD_TYPE=(debug|release) -DCMAKE_INSTALL_PREFIX=<install_directory> ..\ncmake should find MPI and Julia automatically. If not, the directories  can be specified manually.  The cmake clients ccmake or cmake-gui could be useful.\nSpecifying the directory install_directory for later installation is optional.\nOptional specification of build type sets some default compiler options for optimized or debug code\nCall make\nbash  make\nThis will build and place libtrixi.so in the current directory along with its  header and a Fortran mod file. Your application will have to include and link  against these.\nExamples can be found in the examples subdirectory.\nInstall (optional)\nbash  make install\nThis will install all provided files to the specified location.","category":"page"},{"location":"#Setting-up-Julia","page":"Home","title":"Setting up Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After the library has been installed, you need to configure Julia for use with libtrixi. For this, create a directory where all necessary files will be placed, e.g., libtrixi-julia. Then, you can use the utils/libtrixi-init-julia tool (also available at <install_directory>/bin) to do the rest for you. A minimal example would be:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir libtrixi-julia\ncd libtrixi-julia\n<install_directory>/bin/libtrixi-init-julia \\\n    --p4est-library <p4est_install_directory>/lib/libp4est.so\n    <install_directory>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use libtrixi-init-julia -h to get help.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In your code, pass the path to the libtrixi-julia directory to trixi_initialize, see the code of the examples. If you did not modify the default value for the Julia depot when calling libtrixi-init-julia, libtrixi will find it automatically. Otherwise, when running a program that uses libtrixi, you need to make sure to set the JULIA_DEPOT_PATH environment variable to point to the <julia-depot> folder reported. ","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Go to some directory from where you want to run a Trixi simulation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LIBTRIXI_DEBUG=all \\\n    <install_directory>/bin/simple_trixi_controller_c \\\n    <libtrixi-julia_directory> \\\n    <install_directory>/share/libtrixi/LibTrixi.jl/examples/libelixir_tree1d_dgsem_advection_basic.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"which should give you an output similar to this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"████████╗██████╗ ██╗██╗  ██╗██╗\n╚══██╔══╝██╔══██╗██║╚██╗██╔╝██║\n   ██║   ██████╔╝██║ ╚███╔╝ ██║\n   ██║   ██╔══██╗██║ ██╔██╗ ██║\n   ██║   ██║  ██║██║██╔╝ ██╗██║\n   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝\n\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ SemidiscretizationHyperbolic                                                                     │\n│ ════════════════════════════                                                                     │\n│ #spatial dimensions: ………………………… 1                                                                │\n│ mesh: ………………………………………………………………… TreeMesh{1, Trixi.SerialTree{1}} with length 31                  │\n│ equations: …………………………………………………… LinearScalarAdvectionEquation1D                                  │\n│ initial condition: ……………………………… initial_condition_convergence_test                               │\n│ boundary conditions: ………………………… Trixi.BoundaryConditionPeriodic                                  │\n│ source terms: …………………………………………… nothing                                                          │\n│ solver: …………………………………………………………… DG                                                               │\n│ total #DOFs: ……………………………………………… 64                                                               │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n<snip>\n\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Environment information                                                                          │\n│ ═══════════════════════                                                                          │\n│ #threads: ……………………………………………………… 1                                                                │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n────────────────────────────────────────────────────────────────────────────────────────────────────\n Simulation running 'LinearScalarAdvectionEquation1D' with DGSEM(polydeg=3)\n────────────────────────────────────────────────────────────────────────────────────────────────────\n #timesteps:                  0                run time:       7.20000000e-07 s\n Δt:             1.00000000e+00                └── GC time:    0.00000000e+00 s (0.000%)\n sim. time:      0.00000000e+00                time/DOF/rhs!:         NaN s\n                                               PID:                   Inf s\n #DOF:                       64                alloc'd memory:        143.411 MiB\n #elements:                  16\n\n Variable:       scalar\n L2 error:       2.78684204e-06\n Linf error:     6.06474411e-06\n ∑∂S/∂U ⋅ Uₜ :  -3.46944695e-18\n────────────────────────────────────────────────────────────────────────────────────────────────────\n\nCurrent time step length: 0.050000\n\n────────────────────────────────────────────────────────────────────────────────────────────────────\n Simulation running 'LinearScalarAdvectionEquation1D' with DGSEM(polydeg=3)\n────────────────────────────────────────────────────────────────────────────────────────────────────\n #timesteps:                 20                run time:       1.11329306e+00 s\n Δt:             5.00000000e-02                └── GC time:    5.11113150e-02 s (0.046%)\n sim. time:      1.00000000e+00                time/DOF/rhs!:  2.58861826e-08 s\n                                               PID:            1.57108461e-04 s\n #DOF:                       64                alloc'd memory:        116.126 MiB\n #elements:                  16\n\n Variable:       scalar\n L2 error:       6.03882964e-06\n Linf error:     3.21788773e-05\n ∑∂S/∂U ⋅ Uₜ :  -2.16706314e-09\n────────────────────────────────────────────────────────────────────────────────────────────────────\n\n ────────────────────────────────────────────────────────────────────────────────────\n              Trixi.jl                      Time                    Allocations\n                                   ───────────────────────   ────────────────────────\n         Tot / % measured:              1.13s /  52.4%           57.4MiB /  21.9%\n\n Section                   ncalls     time    %tot     avg     alloc    %tot      avg\n ────────────────────────────────────────────────────────────────────────────────────\n I/O                            3    495ms   83.5%   165ms   8.81MiB   70.0%  2.94MiB\n   ~I/O~                        3    230ms   38.8%  76.7ms   1.09MiB    8.7%   372KiB\n   get element variables        2    160ms   27.0%  80.2ms   1.90MiB   15.1%   975KiB\n   save solution                2    105ms   17.7%  52.5ms   5.81MiB   46.2%  2.91MiB\n   save mesh                    2    250ns    0.0%   125ns     0.00B    0.0%    0.00B\n analyze solution               2   98.1ms   16.5%  49.0ms   3.76MiB   29.9%  1.88MiB\n rhs!                         101    149μs    0.0%  1.47μs   6.61KiB    0.1%    67.0B\n   ~rhs!~                     101   88.1μs    0.0%   872ns   6.61KiB    0.1%    67.0B\n   volume integral            101   21.4μs    0.0%   212ns     0.00B    0.0%    0.00B\n   interface flux             101   10.2μs    0.0%   101ns     0.00B    0.0%    0.00B\n   prolong2interfaces         101   6.71μs    0.0%  66.4ns     0.00B    0.0%    0.00B\n   surface integral           101   5.52μs    0.0%  54.7ns     0.00B    0.0%    0.00B\n   Jacobian                   101   4.86μs    0.0%  48.1ns     0.00B    0.0%    0.00B\n   prolong2boundaries         101   3.79μs    0.0%  37.5ns     0.00B    0.0%    0.00B\n   reset ∂u/∂t                101   3.58μs    0.0%  35.5ns     0.00B    0.0%    0.00B\n   boundary flux              101   2.37μs    0.0%  23.5ns     0.00B    0.0%    0.00B\n   source terms               101   2.25μs    0.0%  22.3ns     0.00B    0.0%    0.00B\n calculate dt                  21   2.18μs    0.0%   104ns     0.00B    0.0%    0.00B\n ────────────────────────────────────────────────────────────────────────────────────","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you change the executable name from simple_trixi_controller_c to simple_trixi_controller_f, you will get a near identical output. The corresponding source files simple_trixi_controller.c and simple_trixi_controller.f90 give you an idea on how to use the C and Fortran APIs of libtrixi, and can be found in the examples/ folder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you just want to test the Julia part of libtrixi, i.e., LibTrixi.jl, you can also run everything from Julia. From the repository root, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"JULIA_DEPOT_PATH=$PWD/libtrixi-julia/julia-depot \\\n    julia --project=<libtrixi-julia_directory>\n    <install_directory>/share/libtrixi/LibTrixi.jl/examples/simple_trixi_controller.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: Most auxiliary output is hidden unless the environment variable LIBTRIXI_DEBUG is set to all. Alternative values for the variable are c or julia to only show debug statements from the C or Julia part of the library, respectively. All values are case-sensitive and must be provided all lowercase.","category":"page"},{"location":"#Linking-against-libtrixi","page":"Home","title":"Linking against libtrixi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use libtrixi in your program, you need to specify -I$LIBTRIXI_PREFIX/include for the include directory with header and module files, -L$LIBTRIXI_PREFIX/lib for the library directory, and -ltrixi for the library itself during your build process. Optionally, you can additionally specify -Wl,-rpath,$LIBTRIXI_PREFIX/lib such that the runtime loader knows where to find libtrixi.so. Here, $LIBTRIXI_PREFIX is the install prefix you specified during the CMake configure stage with -DCMAKE_INSTALL_PREFIX (see above).","category":"page"},{"location":"","page":"Home","title":"Home","text":"An example Makefile is provided with examples/MakefileExternal, which can be invoked from inside the examples/ directory as","category":"page"},{"location":"","page":"Home","title":"Home","text":"make -f MakefileExternal LIBTRIXI_PREFIX=path/to/libtrixi/prefix","category":"page"},{"location":"","page":"Home","title":"Home","text":"to build simple_trixi_controller_f.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: On Linux and FreeBSD systems (i.e., not on macOS or Windows), Julia may internally use a faster implementation for thread-local storage (TLS), which is used whenever Julia functions such task management, garbage collection etc. are used in a multithreaded context, or when they are themselves multithreaded. To activate the fast TLS in your program, you need to add the file $LIBTRIXI_PREFIX/lib/libtrixi_tls.o to the list of files that are linked with your main program. See MakefileExternal for an example of how to do this. If you skip this step, everything will work as usual, but some things might run slightly slower.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Libtrixi was initiated by Benedict Geihe (University of Cologne, Germany) and Michael Schlottke-Lakemper (RWTH Aachen University/High-Performance Computing Center Stuttgart (HLRS), Germany), who are also its principal maintainers.","category":"page"},{"location":"#readme-license","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Libtrixi is licensed under the MIT license (see License).","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) through the research unit FOR 5409 \"Structure-Preserving Numerical Methods for Bulk- and Interface Coupling of Heterogeneous Models (SNuBIC)\" (project number 463312734).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding from the German Federal Ministry of Education and Research through the project grant \"Adaptive earth system modeling with significantly reduced computation time for exascale supercomputers (ADAPTEX)\" (funding id: 16ME0668K).","category":"page"}]
}
