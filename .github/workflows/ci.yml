name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'LICENSE.md'
      - 'README.md'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: "false"

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: ${{ matrix.os }} - ${{ matrix.test_type }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            arch: x64
            shell: bash
            test_type: regular
            julia_version: 1.9
          - os: ubuntu-latest
            arch: x64
            shell: bash
            test_type: coverage
            julia_version: 1.9
          # - os: ubuntu-latest
          #   arch: x64
          #   shell: bash
          #   test_type: valgrind
          #   julia_version: 1.9
          # macOS
          # - os: macos-latest
          #   arch: x64
          #   shell: bash
          #   test_type: regular
          #   julia_version: 1.9
          # Windows
          # - os: windows-latest
          #   arch: x64
          #   shell: 'msys2 {0}'
          #   test_type: regular
          #   julia_version: 1.9
    # Set default shell as suggested here: https://github.community/t/setting-default-shell-or-other-step-metadata-conditionally-in-workflows/154055
    defaults:
      run:
        shell: ${{ matrix.shell }}
    env:
      # Necessary for HDF5 to play nice with Julia
      LD_PRELOAD: /lib/x86_64-linux-gnu/libcurl.so.4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          update: true
          install: git base-devel mingw-w64-x86_64-toolchain
      - name: Install Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia_version }}
          arch: ${{ matrix.arch }}
      - name: Show Julia version information
        run: julia -e 'using InteractiveUtils; versioninfo(verbose=true)'
      - name: Use Julia cache
        uses: julia-actions/cache@v1
      - name: Install MPI
        run: |
          sudo apt-get install -y openmpi-bin libopenmpi-dev
      - name: Install HDF5
        run: |
          sudo apt-get install -y libhdf5-openmpi-dev
      - name: Install gtest
        run: |
          sudo apt-get install -y libgtest-dev
      - name: Install t8code
        run: |
          T8CODE_RELEASE=1.4.1
          mkdir t8code-local
          cd t8code-local
          wget https://github.com/DLR-AMR/t8code/releases/download/v${T8CODE_RELEASE}/t8-${T8CODE_RELEASE}.tar.gz
          tar xf t8-${T8CODE_RELEASE}.tar.gz
          mkdir build
          cd build
          CC=mpicc CXX=mpicxx ../t8-${T8CODE_RELEASE}/configure \
              --prefix=$PWD/../prefix --enable-mpi
          make -j 2
          make install
      - name: Configure (regular)
        if: ${{ matrix.test_type == 'regular' }}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=../install
      - name: Configure (coverage)
        if: ${{ matrix.test_type == 'coverage' }}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=../install \
                   -DCMAKE_BUILD_TYPE=Debug \
                   -DCMAKE_C_FLAGS="-cpp --coverage -O0" \
                   -DCMAKE_Fortran_FLAGS="-cpp --coverage -O0" \
                   -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
                   -DCMAKE_SHARED_LINKER_FLAGS="--coverage" \
                   -DENABLE_TESTING=ON -DJULIA_PROJECT_PATH=../libtrixi-julia
      - name: Build
        run: |
          cd build
          make -j 2
      - name: Install
        run: |
          cd build
          make install
      - name: Test building with an external Makefile
        if: ${{ matrix.test_type == 'regular' }}
        run: |
          cd examples
          make -f MakefileExternal LIBTRIXI_PREFIX=$PWD/../install
      - name: Initialize project directory
        # Note that we set the Julia depot to `~/.julia` *ONLY* to make use of the
        # julia-actions/cache above (which unfortunately hardcoded the `~/.julia`
        # directory). For this reason, we also need to use `--force`
        # Still create subfolder `julia-depot`, which reflects the typical default
        # and is tested below
        run: |
          mkdir libtrixi-julia
          cd libtrixi-julia
          mkdir julia-depot
          ../install/bin/libtrixi-init-julia .. \
              --hdf5-library /usr/lib/x86_64-linux-gnu/hdf5/openmpi/libhdf5.so \
              --t8code-library ../t8code-local/prefix/lib/libt8.so \
              --julia-depot ~/.julia \
              --force
          cp ../install/share/libtrixi/LibTrixi.jl/examples/libelixir_tree1d_dgsem_advection_basic.jl .
          cp ../install/share/libtrixi/LibTrixi.jl/examples/libelixir_p4est2d_dgsem_euler_sedov.jl .
      - name: Prepare coverage reporting
        if: ${{ matrix.test_type == 'coverage' }}
        run: |
          sudo apt-get install -y lcov
          cd libtrixi-julia
          lcov --directory ../build --zerocounters
      - name: Run regular function tests
        if: ${{ matrix.test_type == 'regular' }} || ${{ matrix.test_type == 'coverage' }}
        run: |
          cd libtrixi-julia
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/simple_trixi_controller_c . libelixir_tree1d_dgsem_advection_basic.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/simple_trixi_controller_f . libelixir_tree1d_dgsem_advection_basic.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/simple_trixi_controller_c . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/simple_trixi_controller_f . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/trixi_controller_data_c . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/trixi_controller_data_f . libelixir_p4est2d_dgsem_euler_sedov.jl
        env:
          LIBTRIXI_DEBUG: all
      - name: Check error handling of examples
        if: ${{ matrix.test_type == 'coverage' }}
        run: |
          cd libtrixi-julia
          set +e  # disable early exit on non-zero exit code
          for command in "../build/examples/simple_trixi_controller_c" \
                         "../build/examples/simple_trixi_controller_c ." \
                         "../build/examples/simple_trixi_controller_f" \
                         "../build/examples/simple_trixi_controller_f ." \
                         "../build/examples/trixi_controller_data_c" \
                         "../build/examples/trixi_controller_data_c ." \
                         "../build/examples/trixi_controller_data_f" \
                         "../build/examples/trixi_controller_data_f ."
            do
              $command
              if [ $? -ne 2 ]; then
                echo "Wrong exit code for $command! Expected 2, got $?"
                exit 1
              fi
            done
        env:
          LIBTRIXI_DEBUG: all
          JULIA_DEPOT_PATH: ~/.julia
      - name: Run CTest/gtest tests
        if: ${{ matrix.test_type == 'coverage' }}
        run: |
          cd build/test
          ctest -V
        env:
          LIBTRIXI_DEBUG: all
          JULIA_DEPOT_PATH: ~/.julia
      - name: Run memory checks with Valgrind
        if: ${{ matrix.test_type == 'valgrind' }}
        run: |
          sudo apt-get install -y valgrind
          cd libtrixi-julia
          JULIA_DEPOT_PATH=~/.julia valgrind --error-exitcode=1 -s \
              ../build/examples/simple_trixi_controller_c . libelixir_tree1d_dgsem_advection_basic.jl
          JULIA_DEPOT_PATH=~/.julia valgrind --error-exitcode=1 -s \
              ../build/examples/simple_trixi_controller_f . libelixir_tree1d_dgsem_advection_basic.jl
          JULIA_DEPOT_PATH=~/.julia valgrind --error-exitcode=1 -s \
              ../build/examples/simple_trixi_controller_c . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia valgrind --error-exitcode=1 -s \
              ../build/examples/simple_trixi_controller_f . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/trixi_controller_data_c . libelixir_p4est2d_dgsem_euler_sedov.jl
          JULIA_DEPOT_PATH=~/.julia \
              ../build/examples/trixi_controller_data_f . libelixir_p4est2d_dgsem_euler_sedov.jl
      - name: Process coverage data
        if: ${{ matrix.test_type == 'coverage' }}
        run: |
          cd libtrixi-julia
          lcov --directory ../build  --capture --output-file lcov.info
      - uses: codecov/codecov-action@v3
        if: ${{ matrix.test_type == 'coverage' }}
        with:
          files: ./libtrixi-julia/lcov.info
          flags: unittests
          name: codecov-umbrella
      - name: Coveralls
        if: ${{ matrix.test_type == 'coverage' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./libtrixi-julia/lcov.info
      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session for debugging
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled && always() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
